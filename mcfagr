#! /usr/local/bin/bash
# McFagr - Move Changes From Another Git Repository
# Requirements - the repository is already added as a remote, and has been fetched

# Example:
#../mcfagr/mcfagr d-day..current --exclude content/plugins --exclude .gitignore --edit-file-list

POSITIONAL=()
EXCLUDES=()
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -r|--remote)
            REMOTE="$2"
            shift; shift
            ;;
        -e|--exclude)
            EXCLUDES+=("$2")
            shift; shift
            ;;
        --edit-file-list)
            EDIT_FILE_LIST=1
            shift
            ;;
        -*)
            echo "Unknown option: $1"
            exit 1
            ;;
        *)
            POSITIONAL+=("$1") # save it in an array for later
            shift # past argument
            ;;
    esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters
COMMITISH="$1"

tmpFolder=$(mktemp -d)
echo "Using temp folder at $tmpFolder"
filelist="$tmpFolder/filelist"

# Get the list of files that have been changed based on a range of commits that are important, and --exclude <file> criterion
if [[ -z $EXCLUDES ]]; then
    git diff $COMMITISH --numstat > "$filelist"
else
    function addExcludes { printf "'%s' " "${@/#/:(exclude)}"; }
    excludesCmd="$(addExcludes "${EXCLUDES[@]}")"
    echo Using excludes of: "$excludesCmd"
    bash -c "$(echo git diff $COMMITISH --numstat -- . "$excludesCmd" \> "$filelist")"
fi

# Manually edit the file list
if [[ -n $EDIT_FILE_LIST ]]; then
    [[ -n $VISUAL ]] && $VISUAL "$filelist"
    read -n 1 -p "Pausing... Click any key to continue after editing $filelist" _
fi

# Trim the filelist to only the files
cat "$filelist" | cut -f 3- > "$filelist"

# Calculate the closest commit for each file (based on a range?)

# From the given initial change point (different range):
# Actually, not needed - take the oldest commit that is in the 'closest' list
# For each commit
# Check if any files in the to-include list show this as the 'closest' commit
# Do a separate diff and merge to these files, add and commit
# Add these files to the included list
# Create a patch for only the files that are in the included list
# Apply patch
# Resolve possible conflicts with --rerere
# Loop
